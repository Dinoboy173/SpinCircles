using System;
using System.Collections.Generic;
using System.Text;

namespace MathLib
{
    public class Vector2
    {
        public float x, y;

        public Vector2()
        {
            x = 0;
            y = 0;
        }

        public Vector2(float x, float y)
        {
            this.x = x;
            this.y = y;
        }

        public static Vector2 Add(Vector2 lhs, Vector2 rhs)
        {
            return new Vector2(
              lhs.x + rhs.x,
              lhs.y + rhs.y
            );
        }

        public static Vector2 operator +(Vector2 lhs, Vector2 rhs)
        {
            return new Vector2(
              lhs.x + rhs.x,
              lhs.y + rhs.y
            );
        }

        public static Vector2 Sub(Vector2 lhs, Vector2 rhs)
        {
            return new Vector2(
              lhs.x - rhs.x,
              lhs.y - rhs.y
            );
        }
        public static Vector2 operator -(Vector2 lhs, Vector2 rhs)
        {
            return new Vector2(
              lhs.x - rhs.x,
              lhs.y - rhs.y
            );
        }


        public static Vector2 PreScale(float lhs, Vector2 rhs)
        {
            return new Vector2(lhs * rhs.x, lhs * rhs.y);
        }

        public static Vector2 operator *(float lhs, Vector2 rhs)
        {
            return new Vector2(lhs * rhs.x, lhs * rhs.y);
        }

        public static Vector2 PostScale(Vector2 lhs, float rhs)
        {
            return new Vector2(lhs.x * rhs, lhs.y * rhs);
        }

        public static Vector2 operator *(Vector2 lhs, float rhs)
        {
            return new Vector2(lhs.x * rhs, lhs.y * rhs);
        }

        public static Vector2 operator *(Vector2 lhs, Vector2 rhs)
        {
            return new Vector2(lhs.x * rhs.x, lhs.y * rhs.y);
        }

        public float Magnitude()
        {
            return MathF.Sqrt(x * x + y * y);
        }

        public static float Distance(Vector2 point1, Vector2 point2)
        {
            float disX = point2.x - point1.x;
            float disY = point2.y - point1.y;

            return MathF.Sqrt((disX * disX) + (disY * disY));
        }

        public void Normalise()
        {
            float length = Magnitude();
            if (length != 0)
            {
                x /= length;
                y /= length;
            }
            else
            {
                x = 0;
                y = 0;
            }
        }

        public static Vector2 Normalise(Vector2 vec)
        {
            Vector2 unitVec = new Vector2(vec.x, vec.y);
            unitVec.Normalise();
            return unitVec;
        }

        public float Dot(Vector2 rhs)
        {
            return (x * rhs.x) + (y * rhs.y);
        }

        public static float Dot(Vector2 lhs, Vector2 rhs)
        {
            return (lhs.x * rhs.x) + (lhs.y * rhs.y);
        }

        // This method allows an implicit conversion from
        // System.Numerics.Vector2 to our Vector2 class.
        public static implicit operator Vector2(System.Numerics.Vector2 v)
        {
            return new Vector2 { x = v.X, y = v.Y };
        }

        // This method allows an implicit conversion from
        // our Vector2 class to System.Numerics.Vector2.
        public static implicit operator System.Numerics.Vector2(Vector2 v)
        {
            return new System.Numerics.Vector2(v.x, v.y);
        }
    }
}
